{% extends "base.jinja2" %}

{% block html_head %}
    <!-- CodeMirror -->
    <link rel="stylesheet" href="/3pp/codemirror/lib/codemirror.css"/>
    <link rel="stylesheet" href="/3pp/codemirror/addon/display/fullscreen.css"/>
    <link rel="stylesheet" href="/3pp/codemirror/addon/hint/show-hint.css"/>
    <script type="text/javascript" src="/3pp/codemirror/lib/codemirror.js"></script>
    <script type="text/javascript" src="/3pp/codemirror/addon/dialog/dialog.js"></script>
    <script type="text/javascript" src="/3pp/codemirror/addon/search/searchcursor.js"></script>
    <script type="text/javascript" src="/3pp/codemirror/addon/edit/matchbrackets.js"></script>
    <script type="text/javascript" src="/3pp/codemirror/addon/display/fullscreen.js"></script>
    <script type="text/javascript" src="/3pp/codemirror/mode/yaml/yaml.js"></script>
    <script type="text/javascript" src="/3pp/codemirror/addon/hint/show-hint.js"></script>

    <!-- Autocomplete hint implementation for the editor -->
    <script type="text/javascript">
/**
 * Generates completion hints depending on the current cursor position of the yaml file
 */
var purlYamlHint = function(editor, options) {
  var cursor = editor.getCursor();
  var thisLine = editor.getLine(cursor.line);
  var currEnd = cursor.ch;
  var currStart = currEnd;

  // Look left and right from the current cursor position to have in view the entire word at that
  // location:
  while (currStart && /[:\/\w]+/.test(thisLine.charAt(currStart - 1))) {
    --currStart;
  }
  while (currEnd && /[:\/\w]+/.test(thisLine.charAt(currEnd))) {
    ++currEnd;
  }
  var currWord = thisLine.slice(currStart, currEnd);

  var getContext = function() {
    /* Finds the nearest root-level directive above the current line (if one exists) and returns its
       name. */
    var lineNum = cursor.line;
    var matches = /^(\w+):/.exec(editor.getLine(lineNum));
    while (!matches && lineNum > 0) {
      matches = /^(\w+):/.exec(editor.getLine(--lineNum));
    }
    return matches && matches[1];
  };

  // The beginning and ending positions of the text that will be replaced if a completion
  // hint is selected:
  var from = CodeMirror.Pos(cursor.line, currStart);
  var to = CodeMirror.Pos(cursor.line, currEnd);

  // If there is no word here just return an empty list:
  if (currStart === currEnd) {
    return {list: [], from: from, to: to}
  }

  var pruneReplacementList = function(replacementList) {
    /* Prunes the given list of completions to only those which begin with the current word.
       If none match, then returns the entire list.
       If there is only one match and it is exact, return nothing.  */
    prunedList = replacementList.filter(function(r) {
      return (new RegExp("^" + currWord).test(r['displayText']));
    });
    if (!prunedList || prunedList.length === 0) {
      return replacementList;
    }
    else if (prunedList.length === 1 && prunedList[0]['displayText'] === currWord) {
      return [];
    }
    else {
      return prunedList;
    }
  };

  // Send back a completion hint list contextualised to the current position as well as to
  // the letters that have been typed so far.
  var prevString = thisLine.slice(0, currStart);
  var context = getContext();
  {% for schema_item in schema_file['properties'] %}
        if (context === '{{schema_item}}') {
             $("#help-area").show();
             {% if 'description' in schema_file['properties'][schema_item] %}
                $("#help-area").html("{{schema_item}}: {{schema_file['properties'][schema_item]['description']}}");
             {% else %}
                $("#help-area").html("{{schema_item}}");
             {% endif %}
        }
  {% endfor %}

  if (prevString === '') {
    return {list: pruneReplacementList([
        {% for schema_item in schema_file['properties'] %}
            {% if 'suggest' not in schema_file['properties'][schema_item]
               or schema_file['properties'][schema_item]['suggest'] == True  %}
                 {% if 'suggestion' in schema_file['properties'][schema_item] %}
                    {% if schema_file['properties'][schema_item]['type']=='array' %}
                        {displayText: '{{schema_item}}:', text: '{{schema_item}}:\n- {{schema_file['properties'][schema_item]['suggestion']}}'},
                    {% elif schema_file['properties'][schema_item]['type']=='object' %}
                        {displayText: '{{schema_item}}:', text: '{{schema_item}}:\n  {{schema_file['properties'][schema_item]['suggestion']}}'},
                    {% else %}
                        {displayText: '{{schema_item}}:', text: '{{schema_item}}: {{schema_file['properties'][schema_item]['suggestion']}}'},
                    {% endif %}
                 {% elif schema_file['properties'][schema_item]['type'] == 'array' %}
                    {% if schema_file['properties'][schema_item]['items']['type'] == 'object' and
                        'properties' in schema_file['properties'][schema_item]['items'] %}
                        {displayText: '{{schema_item}}:', text: '{{schema_item}}: \n- '
                        {% for array_prop in schema_file['properties'][schema_item]['items']['properties'] %}
                           + '{{array_prop}}: \n  '
                           {% endfor %}
                        },
                    {% else %}
                        {displayText: '{{schema_item}}:', text: '{{schema_item}}: \n- '},
                    {% endif %}
                 {% elif schema_file['properties'][schema_item]['type'] == 'object' and
                     'properties' in schema_file['properties'][schema_item] %}
                     {displayText: '{{schema_item}}:', text: '{{schema_item}}: \n  '
                        {% for obj_prop in schema_file['properties'][schema_item]['properties'] %}
                          + '{{obj_prop}}: \n  '
                        {% endfor %}
                     },
                 {% else %}
                     {displayText: '{{schema_item}}:', text: '{{schema_item}}: '},
                 {% endif %}
            {% endif %}
        {% endfor %}
            ]),
            from: from, to: to};
  }
  {% for schema_item in schema_file['properties'] %}
  {% if schema_file['properties'][schema_item]['type'] == 'array' %}
    else if ( (/^\s*-\s+$/.test(prevString) || /^\s*\s+$/.test(prevString) ) && context === '{{schema_item}}') {
       return {list: pruneReplacementList([
          {% for sub_schema_item in schema_file['properties'][schema_item]['items']['properties'] %}
              {displayText: '{{sub_schema_item}}:', text: '{{sub_schema_item}}: '},
          {% endfor %}
              ]),
              from: from, to: to};
    }
    {% for sub_schema_item in schema_file['properties'][schema_item]['items']['properties'] %}
       {% if schema_file['properties'][schema_item]['items']['properties'][sub_schema_item]['type'] == 'object' %}
        else if (/^\s+{{sub_schema_item}}:\s+$/.test(prevString) && context === '{{schema_item}}') {
          return {list: pruneReplacementList([
          {% for sub_sub_schema_item in schema_file['properties'][schema_item]['items']['properties'][sub_schema_item]['properties'] %}
              {displayText: '{{sub_sub_schema_item}}:', text: '{{sub_sub_schema_item}}: '},
          {% endfor %}
              ]),
              from: from, to: to};
        }
       {% elif  schema_file['properties'][schema_item]['items']['properties'][sub_schema_item]['type'] == 'string'
          and 'enum' in schema_file['properties'][schema_item]['items']['properties'][sub_schema_item] %}
        else if (/^\s+{{sub_schema_item}}:\s+$/.test(prevString) && context === '{{schema_item}}') {
          return {list: pruneReplacementList([
          {% for enum_sub_schema_item in schema_file['properties'][schema_item]['items']['properties'][sub_schema_item]['enum'] %}
              {displayText: '{{enum_sub_schema_item}}', text: '{{enum_sub_schema_item}} '},
          {% endfor %}
              ]),
              from: from, to: to};
        }
       {% endif %}
    {% endfor %}
  {% elif schema_file['properties'][schema_item]['type'] == 'object' %}
    else if (prevString === '  ' && context === '{{schema_item}}') {
       return {list: pruneReplacementList([
          {% for sub_schema_item in schema_file['properties'][schema_item]['properties'] %}
             {displayText: '{{sub_schema_item}}:', text: '{{sub_schema_item}}: '},
          {% endfor %}
              ]),
              from: from, to: to};
    }
  {% elif schema_file['properties'][schema_item]['type'] == 'string' %}
     else if (/^{{schema_item}}:\s+$/.test(prevString)) {
     {% if schema_file['properties'][schema_item]['format'] == 'uri' %}
          return {list: pruneReplacementList([{displayText: 'http://', text: 'http://'},
                                          {displayText: 'https://', text: 'https://'},
                                          {displayText: 'ftp://', text: 'ftp://'},]),
              from: from, to: to};
     {% elif 'enum' in schema_file['properties'][schema_item] %}
            return {list: pruneReplacementList([
             {% for enum_val in schema_file['properties'][schema_item]['enum']%}
                 {displayText: '{{enum_val}}', text: '{{enum_val}} '},
             {% endfor %}
            ]), from: from, to: to};
     {% endif %}
    }
  {% endif %}
  {% endfor %}
};
    </script>

{% endblock %}

{% block content %}

  <h4>
    {% if dev and not existing and editor_type == 'registry'%} Step 2 of 3: {% endif %}
    {% if dev and not existing and editor_type == 'purl'%} Step 3 of 3: {% endif %}
    {% if existing %} Editing {% else %} Adding {% endif %}
    {% set project_id = filename[ 0: filename.index(".") ] %}
    {% if dev %} {{editor_type}} {% endif %}
    project configuration for {{ project_id | upper }}
  </h4>

  <!-- Here is where the CodeMirror editor will live. This element is hidden but it will be used all
       the same to generate the CodeMirror editor.  -->

  <textarea id="code" class="hidden">{% if yaml is defined %}{{ yaml }}{% endif %}</textarea>

  </div>
  <div>
    <button id="validate-btn" class="btn btn-primary" onclick="validate('{{ filename }}', '{{ editor_type }}')">
      Validate
    </button>
    {% if existing %}
      <button id="update-btn" class="btn btn-danger"
              onclick="update_config('{{ filename }}', '{{ editor_type }}')" disabled>Submit update
      </button>
    {% else %}
      <button id="add-btn" class="btn btn-danger"
              onclick="add_config('{{filename}}', '{{editor_type}}', '{{issueNumber}}', '{{addIssueLink}}')" disabled>
        Add configuration
      </button>
    {% endif %}
    {% if dev and not existing %}
      <button id="next-step-btn" class="btn btn-danger"
              onclick="" disabled>
          {% if editor_type == 'registry' %}
        Next step: Add PURL configuration
          {% else %}
        Finished: Return to home page
          {% endif %}
      </button>
    {% endif %}
  </div>

  <!-- Messages received when pressing the 'Validate' button are displayed in this div. -->
  <div id="status-area" role="alert" style="display:none" >
    <button id="close-alert-btn" type="button" class="close" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    <div id="alert-message"> <!-- For the main validation message. -->
    </div>

    <div id="details-area" style="display:none">
        <hr/>
        <a href="" id="showDetailsLink" class="alert-link" onclick="showHideText('details','showDetailsLink');return false;">
            Show Details
        </a>

        <div id="details" style="display:none">
            <a href="" id="hideDetailsLink" class="alert-link" onclick="showHideText('showDetailsLink','details');return false;">
                Hide Details
            </a>
            <div id="detail-message" class="preformatted">  <!-- for the secondary message. -->
            </div>
        </div> <!-- details -->
    </div> <!-- details-area -->
  </div> <!-- status-area -->

  <div id="help-area" class="alert alert-info" role="alert" style="display:none" >

    <!-- The form that gets displayed on the confirmation box -->
    <div class="form-content" style="display:none;">
        <form class="form" role="form">
          <div class="form-group">
            <label for="commit-msg">Commit message</label>
            <input type="text" class="form-control" id="commit-msg" name="commit-msg">
          </div>
          <div class="form-group">
            <label for="descr">Detailed description</label>
            <input type="text" class="form-control" id="descr" name="descr">
          </div>
        </form>
    </div>

{% endblock %}